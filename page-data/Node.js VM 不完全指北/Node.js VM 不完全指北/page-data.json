{"componentChunkName":"component---src-templates-blog-post-js","path":"/Node.js VM 不完全指北/Node.js VM 不完全指北/","result":{"data":{"site":{"siteMetadata":{"title":"lqs469","author":"Qinshuo(Allen) Li"}},"markdownRemark":{"id":"457fd8ab-402c-583b-aa96-e29f40500269","excerpt":"前言  是 Node.js 顶级模块之一，你可以直接在 Node.js 中使用  引入， 的功能是可以在 V8 虚拟机的上下文中编译和执行 JavaScript 代码。 The vm module enables compiling and running code within V8 Virtual Machine contexts. \n——来自Node.js…","html":"<h2>前言</h2>\n<p><a href=\"https://nodejs.org/api/vm.html#vm_vm_executing_javascript\"><code class=\"language-text\">vm</code></a> 是 Node.js 顶级模块之一，你可以直接在 Node.js 中使用 <code class=\"language-text\">require</code> 引入，<code class=\"language-text\">vm</code> 的功能是可以在 V8 虚拟机的上下文中编译和执行 JavaScript 代码。</p>\n<blockquote>\n<p>The vm module enables compiling and running code within V8 Virtual Machine contexts.\n——来自Node.js文档</p>\n</blockquote>\n<p>它比 <code class=\"language-text\">eval</code>、<code class=\"language-text\">Function</code> 更安全，而且同样很简单。</p>\n<h2>入门</h2>\n<p>那么我们可以用它来做什么呢？假设你有一段可执行的js代码，最简单的两种方法让它run起来：</p>\n<ol>\n<li>打开浏览器 console，回车执行。</li>\n<li>打开一个 terminal，使用 node 来执行它。</li>\n</ol>\n<p>这两种都是手动、主动的执行。如果想把这个过程自动化，把目标代码放入到我的程序里呢？方法也有：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code class=\"language-text\">eval</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\"><code class=\"language-text\">Function</code></a></li>\n<li><a href=\"https://nodejs.org/api/vm.html#vm_vm_executing_javascript\"><code class=\"language-text\">vm</code></a></li>\n</ol>\n<p>下面是 eval 和 Function 实现 runtime 的语法最基本实现，vm 我们会在后面详细介绍：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// eval(string)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 + 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: 4</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2 + 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: 2 + 2</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'return a + b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: 8</span></code></pre></div>\n<p>我们可以用它们实现一个 javascript 的 runtime 来执行目标代码。比如这样一个场景，我的产品是一个 SDK  Playground，我的客户是开发者，它写了一段测试代码想放进我提供的产品里看看运行结果如何，我想要做成一个自动化的服务，那么用上面语法写这样的 JS runtime 是一个不错的选择。</p>\n<p>上面提到了 <code class=\"language-text\">eval</code>、<code class=\"language-text\">Function</code>，他们语法和功能我们这里不做介绍了，他也能执行目标代码，但是却带来一些问题：首先最大的是安全性，无论如何目标代码不能影响我正常的服务，也就是说，这个执行环节得是一个沙盒环境，而<code class=\"language-text\">eval</code>显然并不具备这个能力。如果需要一段不信任的代码放任它执行，那么不光服务，整个服务器的文件系统、数据库都暴露了。甚至目标代码会修改<code class=\"language-text\">eval</code>函数原型，埋入陷阱等等。</p>\n<p><code class=\"language-text\">eval</code> 的安全性问题我们就不做更多解释了，其实在生产中，我们应该尽量避免使用它（甚至很多lint规则发现它存在都会报错）。总结来说，作为js的一个全局对象，它并没有任何沙盒的设计，这显然是无法在生产中使用的。而 <code class=\"language-text\">Funtion</code> 也有同样的安全问题，他们俩的差异可以查阅 MDN 文档，这里按下不表。</p>\n<h2>进阶</h2>\n<p>那么，既然说到了沙盒属性，vm具备怎么的特性呢？</p>\n<p>首先你可以使用<code class=\"language-text\">vm.Script</code>方法构建一个脚本对象：<code class=\"language-text\">new vm.Script(code[, options])</code>，他的API可以总结为下面三个：</p>\n<ul>\n<li><code class=\"language-text\">script.runInThisContext(opts)</code> - 在当前作用域中运行脚本，也就是说，脚本可以访问当前脚本的全局变量，而不是局部作用域。</li>\n<li><code class=\"language-text\">script.runInContext(context, opts)</code> - 在提供的作用域中运行脚本，作用域是某个 <code class=\"language-text\">vm.createContext</code> 的结果。 在 <code class=\"language-text\">script.runInContext</code> 中，您可以提供一个自定义可控sandbox。</li>\n<li><code class=\"language-text\">script.runInNewContext(sandbox, opts)</code> - 在一个新的 sandbox 的作用域范围内运行脚本。即 <code class=\"language-text\">runInNewContext</code> 会为您自动调用 <code class=\"language-text\">vm.createContext</code>。</li>\n</ul>\n<p>当然也可以直接用<code class=\"language-text\">vm</code>上的方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvm<span class=\"token punctuation\">.</span><span class=\"token function\">runInThisContext</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> sandbox<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvm<span class=\"token punctuation\">.</span><span class=\"token function\">runInContext</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>从上面可以看出，<code class=\"language-text\">vm</code>始终提供了一个可选的作用域来实现沙盒特性，以此来隔绝沙盒内外的影响。\n更多 API 细节查看官网文档：<a href=\"https://nodejs.org/api/vm.html#vm_vm_executing_javascript\">https://nodejs.org/api/vm.html#vm<em>vm</em>executing_javascript</a></p>\n<h2>性能对比</h2>\n<p>比起其他实现runtime的方案，vm的速度会慢一些，因为他建立了封闭而完整的上下文环境。下面来个小实验：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var code = `\nvar fn = () =&gt; {}\nI = 100; while(I--) { fn(); }\n`;\n\nconst vm = require(&#39;vm&#39;);\nconst context = vm.createContext();\nconst script = new vm.Script(code);\n\nconsole.time(&#39;vm&#39;);\nscript.runInContext(context);\nconsole.timeEnd(&#39;vm&#39;);\n\nconsole.time(&#39;eval&#39;);\neval(code);\nconsole.timeEnd(&#39;eval&#39;);\n\n\n// Results:\nvm: 1.122ms\neval: 0.156ms</code></pre></div>\n<p>可以明显看出，vm比eval还是慢了不少。</p>\n<h2>安全性</h2>\n<p>使用vm的模块会比eval更为安全，因为vm模块运行的脚本完全无权访问外部作用域（或自行设置一个有限的作用域）。 脚本仍在同一进程中运行，因此为了获得最佳安全性。当然你可以给上下文传入一些通用的API方便开发：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vm.runInNewContext(`\n  const util = require(‘util’);\n  console.log(util);\n`, {\n  require: require,\n  console: console\n});</code></pre></div>\n<p>此外，另一个开源库vm2针对vm的安全性等方面做了更多的提升，<a href=\"https://github.com/patriksimek/vm2\">vm2</a>。避免了一些运行脚本有可能“逃出”沙盒运行的边缘情况，语法也跟易于上手，很推荐使用。</p>\n<h2>实战 Demo（我能用它来干什么？）</h2>\n<p>前短时间我用 VM + Midway 做了一个自用的 FaaS 服务，跟其他大型 FaaS 服务基本功能一样，你可以在上面运行、开发和管理你的 serverless 函数，而无需考虑构建和部署基础框架，也不用写任何框架相关的代码，只专注于业务。项目地址：<a href=\"https://github.com/lqs469/micro-serverless\">lqs469/micro-serverless: A micro serverless service based on Node.js VM</a></p>\n<p>搭建一些简单的个人助理服务，例如天气提示，新闻推送或单纯提醒我不要错过比赛直播。 而这些小需求并没有必要用完整的框架来搭建几个复杂完整的应用程序来解决。 而 serverless 显然很合适。 所以，我做了这个能满足我需求且简易，灵活的 serverless 服务。</p>\n<p><strong>做一个 Github Trending</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://github-trending-api.now.sh/repositories'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">curl</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://github-trending-api.now.sh/repositories'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> dataType<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> | 👨‍💻</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>author<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> | ⭐️</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>stars<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> | </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>language<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    url<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    desc<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>GET <code class=\"language-text\">//127.0.0.1:7001/vm/github_trending</code></p>\n<p><strong>根据传入的地理位置查询天气</strong></p>\n<p>你可以给函数加入参数，方法时通过请求 URL 的 query，然后在函数中通过 <code class=\"language-text\">ctx.query</code> 取到。比下面的例子可以请求：<code class=\"language-text\">//127.0.0.1:7001/vm/weather?location=Tokyo</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// weather.js</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> location <span class=\"token operator\">=</span> 'New York’ <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://api.weatherstack.com/current?access_key=95f5ee664befefc1c49fa0dac0da19c7&amp;query=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>location<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">curl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dataType<span class=\"token operator\">:</span> ‘json’ <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>GET <code class=\"language-text\">//127.0.0.1:7001/vm/weather?location=Tokyo</code></p>\n<p>具体实现细节和函数规则可以看<a href=\"https://github.com/lqs469/micro-serverless\">Readme</a>。</p>\n<h2>总结</h2>\n<p>Vm 是一个很有用的 API，但是在生产中运用却很少，原因其实也很明显——安全性，没有人愿意开着飞机时引擎暴露给别人，下面总结一下 vm：</p>\n<ul>\n<li>足够实现一些 runtime 场景，让你可以开着飞机修飞机。</li>\n<li>避免了使用极度不安全的 <code class=\"language-text\">eval</code> 或者 <code class=\"language-text\">Function</code> 。</li>\n<li>Vm 模块似乎提供了比较安全的实现，以及精心设计的沙盒模型，但是攻击者仍然可以利用它（是的，有兴趣的同学可以查看这篇<a href=\"https://pwnisher.gitlab.io/nodejs/sandbox/2019/02/21/sandboxing-nodejs-is-hard.html\">文章</a>。</li>\n<li>Vm2 似乎提供了一个更坚固的沙箱，代码无法“逃脱”，但是安全性问题也可能潜伏其中。</li>\n</ul>\n<p>总而言之，我仍然认为运行第三方代码的唯一安全方法是“物理地”将应用程序与该代码分离，例如，通过虚拟机、docker、容器中运行它才是让你更放心的方案，至少在生产中采用绝对安全的方案可以让你睡个好觉。但是如果是对于安全要求没有那么高的场景（比如上面的个人服务），vm 不失为一个简单有效的 runtime 方案，基于此可以设计出很多有趣的东西。</p>","frontmatter":{"title":"Node.js VM 不完全指北","date":"April 09, 2020","categories":"弱鸡之路"}}},"pageContext":{"slug":"/Node.js VM 不完全指北/Node.js VM 不完全指北/","previous":{"fields":{"slug":"/GraphQL与REST相比的优势和短板/"},"frontmatter":{"title":"GraphQL 与 REST 相比的优势和短板"}},"next":{"fields":{"slug":"/micro-serverless/"},"frontmatter":{"title":"micro-serverless"}}}}}